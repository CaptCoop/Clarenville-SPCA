<?php

function snappy_common_block_info() {

  $blocks['features_list'] = array(
    'info' => t('Features_list'),
    'cache' => DRUPAL_NO_CACHE,
  );  
  $blocks['snappy_shoppingcart'] = array(
    'info' => t('Custom Shopping cart'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

function snappy_common_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'features_list':
      $block['subject'] = t('Features');
      $block['content'] = get_features_list();
      break;
    case 'snappy_shoppingcart':
      $block['subject'] = t('Custom Shopping cart');
      $block['content'] = custom_shoppingcart();
      break;    
  }
  return $block;
}

function get_features_list() {

	$features_list = array();	
  $result = db_query("SELECT n.nid, n.title, pl.link_title, pl.mlid, pl.weight
  FROM {node} n 
  INNER JOIN {menu_links} ml ON SUBSTRING_INDEX( ml.link_path,  '/', -1 ) = n.nid
  INNER JOIN {menu_links} pl ON ml.plid = pl.mlid
  WHERE n.status = 1 and n.type = :type order by ml.weight ASC", array(':type' => 'features'));
  while ($record = $result->fetchAssoc()) {    
    $features_list[$record['mlid']]['weight'] = $record['weight'];
    $features_list[$record['mlid']]['name'] = $record['link_title'];
    $features_list[$record['mlid']]['node'][$record['nid']] = array('nid' => $record['nid'], 'title' => $record['title']);
  }  
  foreach ($features_list as $key => $row) {
    $volume[$key]  = $row['weight'];        
  }
  array_multisort($volume, SORT_ASC, $features_list);
	return theme('features_list', array('features_list' => $features_list));
}

function snappy_common_theme() {
	return array(
    'features_list' => array(      
      'template' => 'features-block',
      'variables' => array('features_list' => NULL), 
    ),
    'mukam_product_image_zoomer' => array(
      'variables' => array('images' => array(), 'view_mode' => 'full'),
    ),
  );
}
/**
 * Implements hook_field_formatter_info().
 */
function snappy_common_field_formatter_info() {
  return array(
    'mukam_product_image_zoomer' => array(
      'label' => t('Ubercart product zoomer'),
      'description' => t('The first image is displayed with the "uc_product" image style, and subsequent images are displayed below it with the "uc_thumbnail" image style.'),
      'field types' => array('image'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function snappy_common_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'mukam_product_image_zoomer':
      $element[0] = array(
        '#theme' => 'mukam_product_image_zoomer',
        '#images' => $items,
      );
      break;
  }

  return $element;
}

function theme_mukam_product_image_zoomer($variables) {
  static $rel_count = 0;
  $images = $variables['images'];

  // Get the current product image widget.
  $image_widget = uc_product_get_image_widget();

  $first = array_shift($images);
  
  drupal_add_css(drupal_get_path('theme','mukam').'/css/anythingzoomer.css');
  drupal_add_js(drupal_get_path('theme','mukam').'/js/jquery.anythingzoomer.min.js');
  //$output = '<div class="product-thumbnails">';

  $main = '<div class="product-gallery-active">';
  $url_image_min = image_style_url('mukam_product_main_min', $first['uri']);
  $url_image_max = image_style_url('mukam_product_main_max', $first['uri']);
  $main .= '<div class="small">
              <img class="product-gallery1" src="' . $url_image_min . '" data-zoom-image="' . $url_image_max . '" alt="' . $first['alt'] . '" title="' . $first['title'] . '">
            </div>';
  $main .= '<div class="large">
              <img class="product-gallery1" src="' . $url_image_max . '" data-zoom-image="' . $url_image_max . '" alt="' . $first['alt'] . '" title="' . $first['title'] . '">
            </div>';
  $main .= '</div>';

  $more = '';
  if (!empty($images)) {
    $more .= '<div id="product-zoom" class="product-gallery">';
    foreach ($images as $thumbnail) {
      // Node preview adds extra values to $images that aren't files.
      if (!is_array($thumbnail) || empty($thumbnail['uri'])) {
        continue;
      }
      $more .= '<a data-rel="prettyPhoto[shopgal]" class="prettyPhoto" href="' . image_style_url('uc_product_full', $thumbnail['uri']) . '" title="' . $thumbnail['title'] . '"';
      if ($image_widget) {
        $more .= $image_widget_func($rel_count);
      }
      $more .= '>';
      $more .= theme('image_style', array(
        'style_name' => 'mukam_product_thumbnail',
        'path' => $thumbnail['uri'],
        'alt' => $thumbnail['alt'],
        'title' => $thumbnail['title'],
      ));
      $more .= '</a>';
    }
    $more .= '</div>';
  }
  $output = $more.$main;
  //$output .= '</div>';
  $rel_count++;

  return $output;
}
/**
 * Implements hook_image_default_styles().
 */
function snappy_common_image_default_styles() {
  $styles = array();

  $styles['mukam_product_thumbnail'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => '100',
          'height' => '128',
          'upscale' => 0,
        ),
        'weight' => '0',
      ),
    ),
  );

  $styles['mukam_product_main_min'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => '280',
          'height' => '390',
          'upscale' => 0,
        ),
        'weight' => '0',
      ),
    ),
  );

  $styles['mukam_product_main_max'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => '1200',
          'height' => '1460',
          'upscale' => 0,
        ),
        'weight' => '0',
      ),
    ),
  );
  return $styles;
}
function custom_shoppingcart(){
    global $base_url;
    $qty = 0;
    $total = 0;
    if(module_exists('uc_cart')){
      $cart = uc_cart_get_contents();
      
      foreach ($cart as $key => $value) {
        if(isset($value->qty)){
          $qty += $value->qty;
          $total += round($value->qty * $value->price,0);
        }
      }  
    }
    $headerClass = get_header_type();
    if($headerClass == 'header-5') {
      $output = '<div class="shopping"><a href="'.$base_url.'/cart"><div class="shopping-cart"><i class="mukam-shop pull-left"></i><p>Shopping Cart</p><span>('.$qty.') Cart Subtotal: $'.$total.'</span></div></a></div>';
    } elseif($headerClass == 'shopheader'){
      $output = '<a href="'.$base_url.'/cart"><div class="shopping-cart"><i class="mukam-shop pull-left"></i><p>Shopping Cart</p><span>('.$qty.') Cart Subtotal: $'.$total.'</span></div></a>';
    } else {
      $output = '
                <a href="'.$base_url.'/cart"><div class="shopping-cart"><i class="mukam-shop"></i></div></a>
                <div class="shopping-hover-cart"><i class="mukam-shop pull-left"></i><p>Shopping Cart</p><span>('.$qty.') Cart Subtotal: $'.$total.'</span></div>
              ';
    }
    $alias_parts = explode('/', drupal_get_path_alias());
    if(count($alias_parts)){
      if(in_array($alias_parts[0], array('home-parallax'))){
        $output = '
                  <a href="'.$base_url.'/cart"><div class="shopping-cart"><i class="mukam-shop"></i></div></a>
                  <div class="shopping-hover-cart"><i class="mukam-shop pull-left"></i><p>Shopping Cart</p><span>('.$qty.') Cart Subtotal: $'.$total.'</span></div>
                ';
      }
    }
    return $output;
}
function snappy_common_ctools_render_alter(&$info, &$page, &$context) {
   $data = array_values($context['contexts']);
   // Below is nothing but to call hook_node_view which force to pass the
   // node object.
   if(isset($data[0]->data->type)){
    if($data[0]->data->type == 'blog'){
      module_invoke_all('node_view', $data[0]->data, 'full', '');   
    }
   }
}
function snappy_common_node_view($node, $view_mode){ 
  if($view_mode == 'full'){
    $crumbs = array();
    $crumbs[] = l(t('Home'), '');
    if($node->type == 'product'){
      $crumbs[] = l(t('SHOP'), 'shop');
    } elseif($node->type == 'blog'){
      $crumbs[] = l(t('BLOG'), 'blogs');
    }
    drupal_set_breadcrumb($crumbs);
  }
}